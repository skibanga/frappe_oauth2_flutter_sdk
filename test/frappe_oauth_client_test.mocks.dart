// Mocks generated by Mockito 5.4.6 from annotations
// in frappe_oauth2_flutter_sdk/test/frappe_oauth_client_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:frappe_oauth2_flutter_sdk/models/oauth_config.dart' as _i2;
import 'package:frappe_oauth2_flutter_sdk/services/network_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOAuthConfig_0 extends _i1.SmartFake implements _i2.OAuthConfig {
  _FakeOAuthConfig_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i3.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.OAuthConfig get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeOAuthConfig_0(this, Invocation.getter(#config)),
          )
          as _i2.OAuthConfig);

  @override
  _i4.Future<Map<String, dynamic>> get(
    String? endpoint, {
    Map<String, String>? headers,
    Map<String, String>? queryParams,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [endpoint],
              {#headers: headers, #queryParams: queryParams},
            ),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> post(
    String? endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? body,
    Map<String, String>? formData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [endpoint],
              {#headers: headers, #body: body, #formData: formData},
            ),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> put(
    String? endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? body,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [endpoint],
              {#headers: headers, #body: body},
            ),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> delete(
    String? endpoint, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [endpoint], {#headers: headers}),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
